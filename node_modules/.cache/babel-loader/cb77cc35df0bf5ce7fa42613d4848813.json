{"ast":null,"code":"import { useCallback, useReducer } from 'react';\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case 'INPUT_CHANGE':\n      let formIsValid = true;\n\n      for (const inputId in state.inputs) {\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n\n      return { ...state,\n        input: { ...state.inputs,\n          [action.inputId]: {\n            value: action.value,\n            isValid: action.isValid\n          }\n        },\n        isValid: formIsValid\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity\n  });\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: 'INPUT_CHANGE',\n      value: value,\n      isValid: isValid,\n      inputId: id\n    });\n  }, []);\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: 'SET_DATA',\n      inputs: inputData,\n      formValid: formValidity\n    });\n  });\n  return [formState, inputHandler];\n};","map":{"version":3,"sources":["/Users/nikespengler/Desktop/CODE/MERN-Project/src/shared/hooks/form-hook.js"],"names":["useCallback","useReducer","formReducer","state","action","type","formIsValid","inputId","inputs","isValid","input","value","useForm","initialInputs","initialFormValidity","formState","dispatch","inputHandler","id","setFormData","inputData","formValidity","formValid"],"mappings":"AAAA,SAAUA,WAAV,EAAuBC,UAAvB,QAAyC,OAAzC;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,cAAL;AACI,UAAIC,WAAW,GAAG,IAAlB;;AACA,WAAK,MAAMC,OAAX,IAAsBJ,KAAK,CAACK,MAA5B,EAAoC;AAChC,YAAID,OAAO,KAAKH,MAAM,CAACG,OAAvB,EAAgC;AAC5BD,UAAAA,WAAW,GAAGA,WAAW,IAAKF,MAAM,CAACK,OAArC;AACH,SAFD,MAEO;AACHH,UAAAA,WAAW,GAAGA,WAAW,IAAIH,KAAK,CAACK,MAAN,CAAaD,OAAb,EAAsBE,OAAnD;AACH;AACJ;;AACD,aAAO,EACH,GAAGN,KADA;AAEHO,QAAAA,KAAK,EAAE,EACH,GAAGP,KAAK,CAACK,MADN;AAEH,WAACJ,MAAM,CAACG,OAAR,GAAkB;AAAEI,YAAAA,KAAK,EAAEP,MAAM,CAACO,KAAhB;AAAuBF,YAAAA,OAAO,EAAEL,MAAM,CAACK;AAAvC;AAFf,SAFJ;AAMHA,QAAAA,OAAO,EAAEH;AANN,OAAP;;AASJ;AACI,aAAOH,KAAP;AApBR;AAsBH,CAvBD;;AAyBA,OAAO,MAAMS,OAAO,GAAG,CAACC,aAAD,EAAgBC,mBAAhB,KAAwC;AAC3D,QAAM,CAACC,SAAD,EAAYC,QAAZ,IAAwBf,UAAU,CAACC,WAAD,EAAc;AAClDM,IAAAA,MAAM,EAAEK,aAD0C;AAElDJ,IAAAA,OAAO,EAAEK;AAFyC,GAAd,CAAxC;AAMA,QAAMG,YAAY,GAAGjB,WAAW,CAAC,CAACkB,EAAD,EAAKP,KAAL,EAAYF,OAAZ,KAAwB;AACrDO,IAAAA,QAAQ,CAAC;AACLX,MAAAA,IAAI,EAAE,cADD;AAELM,MAAAA,KAAK,EAAEA,KAFF;AAGLF,MAAAA,OAAO,EAAEA,OAHJ;AAILF,MAAAA,OAAO,EAAEW;AAJJ,KAAD,CAAR;AAMH,GAP+B,EAO7B,EAP6B,CAAhC;AASA,QAAMC,WAAW,GAAGnB,WAAW,CAAC,CAACoB,SAAD,EAAYC,YAAZ,KAA6B;AACzDL,IAAAA,QAAQ,CAAE;AACNX,MAAAA,IAAI,EAAE,UADA;AAENG,MAAAA,MAAM,EAAEY,SAFF;AAGNE,MAAAA,SAAS,EAAED;AAHL,KAAF,CAAR;AAKH,GAN8B,CAA/B;AAQA,SAAO,CAACN,SAAD,EAAYE,YAAZ,CAAP;AACH,CAzBM","sourcesContent":["import {  useCallback, useReducer } from 'react';\n\nconst formReducer = (state, action) => {\n    switch (action.type) {\n        case 'INPUT_CHANGE':\n            let formIsValid = true;\n            for (const inputId in state.inputs) {\n                if (inputId === action.inputId) {\n                    formIsValid = formIsValid &&  action.isValid;\n                } else {\n                    formIsValid = formIsValid && state.inputs[inputId].isValid;\n                }\n            }\n            return {\n                ...state, \n                input: {\n                    ...state.inputs, \n                    [action.inputId]: { value: action.value, isValid: action.isValid }\n                },\n                isValid: formIsValid\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n    const [formState, dispatch] = useReducer(formReducer, {\n        inputs: initialInputs,\n        isValid: initialFormValidity\n    });\n\n\n    const inputHandler = useCallback((id, value, isValid) => {\n        dispatch({\n            type: 'INPUT_CHANGE', \n            value: value, \n            isValid: isValid, \n            inputId: id\n        });\n    }, []);\n\n    const setFormData = useCallback((inputData, formValidity) => {\n        dispatch ({\n            type: 'SET_DATA',\n            inputs: inputData,\n            formValid: formValidity\n        });\n    });\n\n    return [formState, inputHandler];\n};"]},"metadata":{},"sourceType":"module"}