{"ast":null,"code":"var _jsxFileName = \"/Users/nikespengler/Desktop/CODE/MERN-Project/src/shared/components/FormElements/Input.js\";\nimport React, { useReducer, useEffect } from \"react\";\nimport { validate } from '../../util/validators';\nimport './Input.css';\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return { ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators)\n      };\n\n    case 'TOUCH':\n      {\n        return { ...state,\n          isTouched: true\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst Input = props => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.initialValue || '',\n    isTouched: false,\n    isValid: props.initialValid || false\n  });\n  const {\n    id,\n    onInput\n  } = props;\n  const {\n    value,\n    isValid\n  } = inputState;\n  useEffect(() => {\n    onInput(id, value, isValid);\n  }, [id, value, isValid, onInput]);\n\n  const changeHandler = event => {\n    dispatch({\n      type: 'CHANGE',\n      val: event.target.value,\n      validators: props.validators\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: 'TOUCH'\n    });\n  };\n\n  const element = props.element === 'input' ? /*#__PURE__*/React.createElement(\"input\", {\n    id: props.id,\n    type: props.type,\n    placeholder: props.placeholder,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }) : /*#__PURE__*/React.createElement(\"textarea\", {\n    id: props.id,\n    rows: props.rows || 3,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `form-control ${!inputState.isValid && inputState.isTouched && 'form-control--invalid'} `,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: props.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, props.label), element, !inputState.isValid && inputState.isTouched && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 61\n    }\n  }, props.errorText));\n};\n\nexport default Input;","map":{"version":3,"sources":["/Users/nikespengler/Desktop/CODE/MERN-Project/src/shared/components/FormElements/Input.js"],"names":["React","useReducer","useEffect","validate","inputReducer","state","action","type","value","val","isValid","validators","isTouched","Input","props","inputState","dispatch","initialValue","initialValid","id","onInput","changeHandler","event","target","touchHandler","element","placeholder","rows","label","errorText"],"mappings":"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","sourcesContent":["import React, { useReducer, useEffect }from \"react\";\nimport { validate } from '../../util/validators';\nimport './Input.css';\n\nconst inputReducer = (state, action) => {\n    switch (action.type) {\n        case 'CHANGE': \n            return {\n                ...state,\n                value: action.val,\n                isValid: validate(action.val, action.validators)\n            };\n        case 'TOUCH': {\n            return {\n                ...state,\n                isTouched: true\n            }\n        }\n        default:\n            return state;\n    }\n};\n\nconst Input = props => {\n    const [inputState, dispatch] = useReducer(inputReducer, {\n        value: props.initialValue || '', \n        isTouched: false, \n        isValid: props.initialValid || false\n    });\n\n    const { id, onInput } = props;\n    const { value, isValid } = inputState;\n\n    useEffect(() => {\n        onInput(id, value, isValid)\n    }, [id, value, isValid, onInput]);\n\n    const changeHandler = event => {\n        dispatch({\n            type: 'CHANGE',  \n            val: event.target.value, \n            validators: props.validators\n        });\n    };\n\n    const touchHandler = () => {\n        dispatch({\n            type: 'TOUCH'\n        });\n    };\n\n    const element = \n        props.element === 'input' ? (\n            <input \n                id={props.id} \n                type={props.type} \n                placeholder={props.placeholder} \n                onChange={changeHandler}\n                onBlur={touchHandler}\n                value={inputState.value}\n            />\n        ) : (\n            <textarea \n                id={props.id} \n                rows={props.rows || 3} \n                onChange={changeHandler} \n                onBlur={touchHandler}\n                value={inputState.value}\n            />\n        );\n\n    \n    return (\n        <div \n            className={`form-control ${!inputState.isValid && inputState.isTouched && \n            'form-control--invalid'} `}\n        >\n            <label htmlFor={props.id}>{props.label}</label>\n            {element}\n            {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n        </div>\n    );   \n};\n\nexport default Input;"]},"metadata":{},"sourceType":"module"}